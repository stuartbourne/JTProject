% PT Scanner.ssl   Ver. 1.03
%
% Date:  30 Jun 1980
%	 (revised 22 Jan 2002)
%
% Author:  Alan Rosselet
%
% Abstract
%     The scanner breaks a PT source program up into syntax tokens.
%   It removes token separators - blanks, tabs, comments.  The
%   scanner detects these lexical errors:  unclosed comments,
%   unclosed literals, literals that cross a line boundary,
%   illegal characters and integers followed by identifiers with no
%   separator between them.

Input :
	lLetter 
	firstCharClass = lLetter 
	lDigit
	lPlus		'+'
	lMinus		'-'
	lStar		'*'
	lColon		':'
	lEquals		'='
	lDot		'.'
	lComma		','
	lSemicolon	';'
	lQuote
	lLeftAngle	'<'
	lRightAngle	'>'
	lLeftParen	'('
	lRightParen	')'
	lLeftBracket	'['
	lRightBracket	']'
	lLeftBrace	'{'
	lRightBrace	'}'
	lSlash		'/'
	lHash		'#'
	lExclamation	'!'
	lAt		'@'
	lBlank
	lIllegal
	lNewLine
	lTab
	lNewPage 
	lEndFile
	lastCharClass = lEndFile;

Output :
	% Keyword tokens -
	%   Tokens pDiv through pRepeat are keywords which will be separated
	%   from user defined identifiers by the Screener.  This Scanner
	%   treats them all as identifiers.
	pDiv 
	firstKeywordToken = pDiv
	pMod
	pOr
	pAnd
	pNot
	pElse
	pOf
	pArray
	pFile
	pPacked
	pProgram
	pVar
	pType
	pIf
	pCase
	pLet
	pFunction
	pSwitch
	pDefault
	pElsif
	pLoop
	pBreak
	pWhen
	pClass
	pPublic
	lastKeywordToken = pPublic

	% Scanner tokens -
	%   These are the tokens actually recognized by the Scanner itself.

	% Compound tokens - 
	%   These will be sent to the parser with a value or index.
	pIdentifier 
	firstCompoundInputToken = pIdentifier
	pInteger
	pLiteral
	lastCompoundInputToken = pLiteral

	% Non-compound tokens - 
	%   These tokens simply represent themselves.
	pNewLine
	pEndFile
	pPlus
	pMinus
	pStar
	pDot
	pComma
	pSemicolon
	pColon
	pEquals
	pNotEqual
	pDoubleEquals
	pLess
	pLessEqual
	pGreaterEqual
	pGreater
	pLeftParen
	pRightParen
	pLeftBracket
	pRightBracket
	pDotDot
	pHash
	pAt
	pLeftBrace
	pRightBrace
	lastSyntaxToken = pRightBrace;

Error :
	eIllegalChar = 5
	firstScanError = eIllegalChar
	eLiteralLine
	eLiteralEOF
	eCommentEOF
	eNoSeparator
	lastScanError = eNoSeparator;

mechanism Buffer :
    % Buffer saves the characters associated with the
    % compound tokens identifier, integer and literal.

    oBufferSave;
	% Save the character form of the last accepted lexical token.




rules

% Note that the order of choice alternatives
% may have a significant effect on performance
% under some implementations of S/SL.
Scan :
	{[
	    | lBlank :
	    | lLetter:
		oBufferSave
		@Identifier
	    | lNewLine:
		.pNewLine
	    | lTab:
	    | ';':
		.pSemicolon
	    | '(':
		.pLeftParen
		%[ Don't need old alternate comment method
		%    | '*':
		%	@AlternateComment
		%    | *:
		%	.pLeftParen
		%]
	    | ')':
		.pRightParen
	    | '[':
		.pLeftBracket
	    | ']':
		.pRightBracket
	    | ',':
		.pComma
	    | ':':
		.pColon
	    | lDigit:
		oBufferSave
		@Integer
		[
		    | lLetter:
			#eNoSeparator
			oBufferSave
			@Identifier
		    | *:
		] 
	    | '#':
		.pHash
	    | '@':
		.pAt
	    | '=':
		[
		    | '=':
			.pDoubleEquals
		    | *:
			.pEquals
		]
	    | '+':
		.pPlus
	    | lQuote:
		@Literal
	    | '-':
		.pMinus
	    | '.':
		[
		    | '.':
			.pDotDot
		    | *:
			.pDot
		]
	    | '!':
		[
		    | '=':
			.pNotEqual
		    | *:
			#eIllegalChar
		]
	    | '<':
		[
		    | '=':
			.pLessEqual
		    | *:
			.pLess
		]
	    | '>':
		[
		    | '=':
			.pGreaterEqual
		    | *:
			.pGreater
		]
	    | '{':% Don't need old comment styles
		.pLeftBrace
	    | '}':
		.pRightBrace
	    | '/': % new comment styles
		[
		    | '*': %multiline comments
			@BlockComment
		    | '/':%single line comments
			@Comment
		    | *:%single slash does not compute
			#eIllegalChar
		]
	    | '*':
		.pStar
	    | lNewPage:
	    | lIllegal:
		#eIllegalChar
	    | lEndFile:
		.pEndFile
	]};

Identifier :
	% Assemble an identifier token

	{[
	    | lLetter, lDigit:
		oBufferSave
	    | *:
		.pIdentifier
		>
	]};

Integer :
	% Assemble an integer token

	{[
	    | lDigit:
		oBufferSave
	    | *:
		.pInteger
		>
	]};

Literal :
	% Assemble a literal string token

	{[
	    | lQuote:
		[
		    | lQuote:
			oBufferSave
		    | *:
			.pLiteral
			>
		]
	    | lNewLine:		% literal must not cross a line boundary
		#eLiteralLine
		.pNewLine
		>
	    | lEndFile:		% literal must be closed before EOF
		#eLiteralEOF
		.pEndFile
		>
	    | *:	% literal may contain any other character
		?
		oBufferSave
	]};

Comment :
	% Discard the contents of a comment
	{[
	    | lEndFile: %Comment could be last line of the program 
		.pEndFile
		>
	    | lNewLine: %comment in most cases ended by a new line
		.pNewLine
		>
	    | *:	% comment may contain any other character
		?
	]};
BlockComment :
	{[
	    | '*':
		[
		    | '/':
			>
		    | *:
		]
	    | lNewLine:
		.pNewLine
	    | lEndFile:
		#eCommentEOF
		.pEndFile
		>
	    | *:
		?
	]};

end
